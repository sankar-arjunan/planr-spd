{"ast":null,"code":"var _jsxFileName = \"/Users/gowrisankara/Desktop/planr/src/components/Suggested.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { PrimaryButton, svgIconStyle, TaskGroup, TaskItem } from \"./Utility\";\nimport styled from \"styled-components\";\nimport { useCookies } from \"react-cookie\";\nimport { toast } from \"react-toastify\";\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingMessage = styled.p`\n  text-align: center;\n  font-size: 1.2em;\n`;\nconst NoTasksMessage = styled.p`\n  text-align: center;\n  font-size: 1.2em;\n  color: #888;\n`;\nconst TaskContainer = styled(TaskItem)`\ndisplay : flex;\nflex-direction : row;\n  background: ${props => props.completionType === \"completed\" ? \"rgb(204, 204, 204)\" : \"rgb(247, 247, 247)\"};\n  padding: 24px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 16px;\n`;\n_c = TaskContainer;\nconst TaskHeader = styled.h2`\n  margin: 0;\n  font-size: 1.5em;\n`;\n_c2 = TaskHeader;\nconst TaskDetails = styled.div`\n  display: flex;\n  flex-direction :  column;\n  gap:16px;\n`;\n_c3 = TaskDetails;\nconst CategoryLink = styled.p`\n  color: #0562a5;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-right: 6px;\n    height: 20px;\n    width: 20px;\n    fill: black;\n  }\n`;\nconst CompletionInfo = styled.p`\n  color: ${props => props.color};\n  display: flex;\n  align-items: center;\n  text-transform: uppercase;\n  margin:0px;\n\n  svg {\n    margin-right: 6px;\n    height: 20px;\n    width: 20px;\n  }\n`;\n_c4 = CompletionInfo;\nconst ActionButtons = styled.div`\n  display: flex;\n  gap: 12px;\n`;\n_c5 = ActionButtons;\nconst EditButton = styled(PrimaryButton)`\n  height: 20px;\n  background: rgb(235, 235, 235);\n  color : black;\n  &:hover {\n    background: rgb(249, 206, 137);\n    color: black;\n  }\n`;\nconst CompleteButton = styled(PrimaryButton)`\n  height: 20px;\n  color: white;\n  background: ${props => props.color};\n`;\n_c6 = CompleteButton;\nfunction Suggested() {\n  _s();\n  const navigate = useNavigate();\n  const [tasks, setTasks] = useState([]);\n  const [cookies] = useCookies(['jwt']);\n  const location = useLocation();\n  const [loading, setLoading] = useState(false);\n  const arr = [\"\", \"live\", \"completed\", \"timeup\"];\n  const [reload, setReload] = useState(false);\n  const [task, setTask] = useState(null);\n  const queryParams = new URLSearchParams(location.search);\n  const queryString = queryParams.get('query') ? `?search=${queryParams.get('query')}` : \"\";\n  useEffect(() => {\n    const fetchSuggestedTask = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/task/suggested', {\n          headers: {\n            'Authorization': `Bearer ${cookies.jwt}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setTask(data);\n        } else {\n          toast.error(\"Failed to fetch suggested task.\");\n        }\n      } catch (error) {\n        toast.error(\"An unexpected error occurred.\");\n      }\n    };\n    fetchSuggestedTask();\n  }, [cookies.jwt]);\n  const handleComplete = async () => {\n    if (task) {\n      try {\n        const response = await fetch(`http://localhost:5000/task/suggested-completed`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${cookies.jwt}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            taskId: task.taskId\n          })\n        });\n        if (response.ok) {\n          toast.success(\"Task marked as completed!\");\n          setTask(null);\n        } else {\n          toast.error(\"Error marking task as completed.\");\n        }\n      } catch (error) {\n        toast.error(\"An unexpected error occurred.\");\n      }\n    }\n  };\n  const handleBadSuggestion = async () => {\n    if (task) {\n      try {\n        const response = await fetch(`http://localhost:5000/task/suggested-bad`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${cookies.jwt}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            taskId: task.taskId\n          })\n        });\n        if (response.ok) {\n          toast.success(\"Task suggestion marked as bad!\");\n          setTask(null);\n        } else {\n          toast.error(\"Error marking task suggestion as bad.\");\n        }\n      } catch (error) {\n        toast.error(\"An unexpected error occurred.\");\n      }\n    }\n  };\n  const getCompletionLabel = completionType => {\n    switch (completionType) {\n      case 'live':\n        return \"2\";\n      case 'timeup':\n        return \"Timeup\";\n      case 'completed':\n        return \"Marked as Done\";\n      default:\n        return \"Unknown Status\";\n    }\n  };\n  const getCompletionColor = completionType => {\n    switch (completionType) {\n      case 'live':\n        return \"black\";\n      case 'timeup':\n        return \"red\";\n      case 'completed':\n        return \"grey\";\n      default:\n        return \"black\";\n    }\n  };\n  const getStyle = type => {\n    switch (type) {\n      case \"live\":\n        return {\n          background: 'transparent',\n          color: 'green',\n          border: '1px solid green',\n          svgFill: 'green'\n        };\n      case \"completed\":\n        return {\n          background: 'green',\n          color: 'white',\n          // This will apply to the button text\n          border: '1px solid green',\n          svgFill: 'white' // This will apply to the SVG fill\n        };\n      case \"timeup\":\n        return {\n          background: 'transparent',\n          color: 'red',\n          // This will apply to the button text\n          border: '1px solid red',\n          svgFill: 'red' // This will apply to the SVG fill\n        };\n      default:\n        return {\n          background: 'transparent',\n          color: 'black',\n          border: '1px solid transparent',\n          svgFill: 'black'\n        };\n    }\n  };\n  const formatDate = date => {\n    return `${new Date(date).getDate()} ${new Intl.DateTimeFormat('en-US', {\n      month: 'short'\n    }).format(new Date(date)).toUpperCase()} - ${new Date(date).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    })}`;\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContainer, {\n    completionType: task.completionType,\n    children: [/*#__PURE__*/_jsxDEV(TaskDetails, {\n      children: [/*#__PURE__*/_jsxDEV(TaskHeader, {\n        children: task.taskName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(CompletionInfo, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#5189b9',\n            fontWeight: '600'\n          },\n          children: task.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            margin: '0 8px',\n            color: \"#7b7b7b\"\n          },\n          children: \"\\u2022\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#7b7b7b',\n            fontWeight: '600'\n          },\n          children: formatDate(task.time)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ActionButtons, {\n      children: [/*#__PURE__*/_jsxDEV(CompleteButton, {\n        style: getStyle(task.completionType),\n        onClick: () => {\n          set;\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          style: {\n            height: '20px',\n            width: '20px',\n            fill: 'green',\n            marginRight: '4px'\n          } // Adjust as needed\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CompleteButton, {\n        style: getStyle(task.completionType),\n        onClick: () => {\n          if (task.completionType === \"live\") {\n            setAsCompleted(task.taskId);\n          } else if (task.completionType === \"completed\") {\n            setAsLive(task.taskId);\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          style: {\n            height: '20px',\n            width: '20px',\n            fill: 'green',\n            marginRight: '4px'\n          } // Adjust as needed\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n_s(Suggested, \"d767DlA+tAZcca4VmQVXrMfht4E=\", false, function () {\n  return [useNavigate, useCookies, useLocation];\n});\n_c7 = Suggested;\nexport default Suggested;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"TaskContainer\");\n$RefreshReg$(_c2, \"TaskHeader\");\n$RefreshReg$(_c3, \"TaskDetails\");\n$RefreshReg$(_c4, \"CompletionInfo\");\n$RefreshReg$(_c5, \"ActionButtons\");\n$RefreshReg$(_c6, \"CompleteButton\");\n$RefreshReg$(_c7, \"Suggested\");","map":{"version":3,"names":["useEffect","useState","useLocation","useNavigate","PrimaryButton","svgIconStyle","TaskGroup","TaskItem","styled","useCookies","toast","jsxDEV","_jsxDEV","LoadingMessage","p","NoTasksMessage","TaskContainer","props","completionType","_c","TaskHeader","h2","_c2","TaskDetails","div","_c3","CategoryLink","CompletionInfo","color","_c4","ActionButtons","_c5","EditButton","CompleteButton","_c6","Suggested","_s","navigate","tasks","setTasks","cookies","location","loading","setLoading","arr","reload","setReload","task","setTask","queryParams","URLSearchParams","search","queryString","get","fetchSuggestedTask","response","fetch","headers","jwt","ok","data","json","error","handleComplete","method","body","JSON","stringify","taskId","success","handleBadSuggestion","getCompletionLabel","getCompletionColor","getStyle","type","background","border","svgFill","formatDate","date","Date","getDate","Intl","DateTimeFormat","month","format","toUpperCase","toLocaleTimeString","hour","minute","hour12","children","taskName","fileName","_jsxFileName","lineNumber","columnNumber","style","fontWeight","category","margin","time","onClick","set","xmlns","viewBox","height","width","fill","marginRight","d","setAsCompleted","setAsLive","_c7","$RefreshReg$"],"sources":["/Users/gowrisankara/Desktop/planr/src/components/Suggested.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { PrimaryButton, svgIconStyle, TaskGroup, TaskItem } from \"./Utility\";\nimport styled from \"styled-components\";\nimport { useCookies } from \"react-cookie\";\nimport { toast } from \"react-toastify\";\n\n// Styled components\nconst LoadingMessage = styled.p`\n  text-align: center;\n  font-size: 1.2em;\n`;\n\nconst NoTasksMessage = styled.p`\n  text-align: center;\n  font-size: 1.2em;\n  color: #888;\n`;\n\nconst TaskContainer = styled(TaskItem)`\ndisplay : flex;\nflex-direction : row;\n  background: ${(props) => (props.completionType === \"completed\" ? \"rgb(204, 204, 204)\" : \"rgb(247, 247, 247)\")};\n  padding: 24px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 16px;\n`;\n\nconst TaskHeader = styled.h2`\n  margin: 0;\n  font-size: 1.5em;\n`;\n\nconst TaskDetails = styled.div`\n  display: flex;\n  flex-direction :  column;\n  gap:16px;\n`;\n\nconst CategoryLink = styled.p`\n  color: #0562a5;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-right: 6px;\n    height: 20px;\n    width: 20px;\n    fill: black;\n  }\n`;\n\nconst CompletionInfo = styled.p`\n  color: ${(props) => props.color};\n  display: flex;\n  align-items: center;\n  text-transform: uppercase;\n  margin:0px;\n\n  svg {\n    margin-right: 6px;\n    height: 20px;\n    width: 20px;\n  }\n`;\n\nconst ActionButtons = styled.div`\n  display: flex;\n  gap: 12px;\n`;\n\nconst EditButton = styled(PrimaryButton)`\n  height: 20px;\n  background: rgb(235, 235, 235);\n  color : black;\n  &:hover {\n    background: rgb(249, 206, 137);\n    color: black;\n  }\n`;\n\nconst CompleteButton = styled(PrimaryButton)`\n  height: 20px;\n  color: white;\n  background: ${(props) => props.color};\n`;\n\n\n\nfunction Suggested() {\n  const navigate = useNavigate();\n  const [tasks, setTasks] = useState([]);\n  const [cookies] = useCookies(['jwt']);\n  const location = useLocation();\n  const [loading, setLoading] = useState(false);\n  const arr = [\"\", \"live\", \"completed\", \"timeup\"];\n  const [reload, setReload] = useState(false);\n  const [task, setTask] = useState(null);\n\n  const queryParams = new URLSearchParams(location.search);\n  const queryString = queryParams.get('query') ? `?search=${queryParams.get('query')}` : \"\";\n  useEffect(() => {\n    const fetchSuggestedTask = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/task/suggested', {\n          headers: {\n            'Authorization': `Bearer ${cookies.jwt}`,\n          }\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setTask(data);\n        } else {\n          toast.error(\"Failed to fetch suggested task.\");\n        }\n      } catch (error) {\n        toast.error(\"An unexpected error occurred.\");\n      }\n    };\n\n    fetchSuggestedTask();\n  }, [cookies.jwt]);\n\n  const handleComplete = async () => {\n    if (task) {\n      try {\n        const response = await fetch(`http://localhost:5000/task/suggested-completed`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${cookies.jwt}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ taskId: task.taskId })\n        });\n\n        if (response.ok) {\n          toast.success(\"Task marked as completed!\");\n          setTask(null);\n        } else {\n          toast.error(\"Error marking task as completed.\");\n        }\n      } catch (error) {\n        toast.error(\"An unexpected error occurred.\");\n      }\n    }\n  };\n\n  const handleBadSuggestion = async () => {\n    if (task) {\n      try {\n        const response = await fetch(`http://localhost:5000/task/suggested-bad`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${cookies.jwt}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ taskId: task.taskId })\n        });\n\n        if (response.ok) {\n          toast.success(\"Task suggestion marked as bad!\");\n          setTask(null);\n        } else {\n          toast.error(\"Error marking task suggestion as bad.\");\n        }\n      } catch (error) {\n        toast.error(\"An unexpected error occurred.\");\n      }\n    }\n  };\n\n  const getCompletionLabel = (completionType) => {\n    switch (completionType) {\n      case 'live': return \"2\";\n      case 'timeup': return \"Timeup\";\n      case 'completed': return \"Marked as Done\";\n      default: return \"Unknown Status\";\n    }\n  };\n\n  const getCompletionColor = (completionType) => {\n    switch (completionType) {\n      case 'live': return \"black\";\n      case 'timeup': return \"red\";\n      case 'completed': return \"grey\";\n      default: return \"black\";\n    }\n  };\n\n  const getStyle = (type) => {\n    switch (type) {\n      case \"live\":\n        return {\n          background: 'transparent',\n          color: 'green', \n          border: '1px solid green',\n          svgFill: 'green',\n        };\n      case \"completed\":\n        return {\n          background: 'green',\n          color: 'white', // This will apply to the button text\n          border: '1px solid green',\n          svgFill: 'white', // This will apply to the SVG fill\n        };\n      case \"timeup\":\n        return {\n          background: 'transparent',\n          color: 'red', // This will apply to the button text\n          border: '1px solid red',\n          svgFill: 'red', // This will apply to the SVG fill\n        };\n      default:\n        return {\n          background: 'transparent',\n          color: 'black',\n          border: '1px solid transparent',\n          svgFill: 'black',\n        };\n    }\n  };\n  \n  const formatDate = (date) => {\n    return `${new Date(date).getDate()} ${new Intl.DateTimeFormat('en-US', { month: 'short' }).format(new Date(date)).toUpperCase()} - ${new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}`;\n  };\n\n  return (\n    <TaskContainer completionType={task.completionType}>\n            <TaskDetails>\n              <TaskHeader>{task.taskName}</TaskHeader>\n              <CompletionInfo>\n                <span style={{ color: '#5189b9', fontWeight: '600' }}>{task.category}</span>\n                <span style={{ margin: '0 8px', color:\"#7b7b7b\" }}>•</span>\n                <span style={{ color: '#7b7b7b', fontWeight: '600' }}>{formatDate(task.time)}</span>\n              </CompletionInfo>\n            </TaskDetails>\n            <ActionButtons>\n            <CompleteButton style={getStyle(task.completionType)}\n                onClick={() => {\n                  set\n                }}\n              ><svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 24 24\"\n                  style={{ height: '20px', width: '20px', fill: 'green', marginRight: '4px' }} // Adjust as needed\n                >\n                  <path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\" />\n                </svg>\n            </CompleteButton>\n              <CompleteButton style={getStyle(task.completionType)}\n                onClick={() => {\n                  if (task.completionType === \"live\") {\n                    setAsCompleted(task.taskId);\n                  } else if (task.completionType === \"completed\") {\n                    setAsLive(task.taskId);\n                  }\n                }}\n              ><svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 24 24\"\n                  style={{ height: '20px', width: '20px', fill: 'green', marginRight: '4px' }} // Adjust as needed\n                >\n                  <path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\" />\n                </svg>\n            </CompleteButton>\n\n            </ActionButtons>\n          </TaskContainer>\n  );\n}\n\nexport default Suggested;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}